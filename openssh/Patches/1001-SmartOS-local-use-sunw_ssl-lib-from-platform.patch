From e92d617c471da9ea7e353da28de9eb7138686638 Mon Sep 17 00:00:00 2001
From: Dan McDonald <danmcd@mnx.io>
Date: Thu, 10 Aug 2023 18:11:52 -0400
Subject: [PATCH 34/34] SmartOS local: use sunw_ssl lib from platform

---
 cipher-chachapoly-libcrypto.c        |  4 +--
 cipher-chachapoly.c                  |  4 +--
 configure.ac                         | 50 ++++++++++++++--------------
 digest-openssl.c                     |  6 ++--
 openbsd-compat/libressl-api-compat.c | 16 ++++-----
 openbsd-compat/openssl-compat.h      | 10 +++---
 ssh-pkcs11-client.c                  | 24 ++++++-------
 ssh-pkcs11.c                         | 24 ++++++-------
 8 files changed, 69 insertions(+), 69 deletions(-)

diff --git a/cipher-chachapoly-libcrypto.c b/cipher-chachapoly-libcrypto.c
index e8d20c288..2ebd699c4 100644
--- a/cipher-chachapoly-libcrypto.c
+++ b/cipher-chachapoly-libcrypto.c
@@ -20,7 +20,7 @@
 #include "openbsd-compat/openssl-compat.h"
 #endif
 
-#if defined(HAVE_EVP_CHACHA20) && !defined(HAVE_BROKEN_CHACHA20)
+#if defined(HAVE_SUNW_EVP_CHACHA20) && !defined(HAVE_BROKEN_CHACHA20)
 
 #include <sys/types.h>
 #include <stdarg.h> /* needed for log.h */
@@ -162,4 +162,4 @@ chachapoly_get_length(struct chachapoly_ctx *ctx,
 	*plenp = PEEK_U32(buf);
 	return 0;
 }
-#endif /* defined(HAVE_EVP_CHACHA20) && !defined(HAVE_BROKEN_CHACHA20) */
+#endif /* defined(HAVE_SUNW_EVP_CHACHA20) && !defined(HAVE_BROKEN_CHACHA20) */
diff --git a/cipher-chachapoly.c b/cipher-chachapoly.c
index 4471fe2d2..010de2d38 100644
--- a/cipher-chachapoly.c
+++ b/cipher-chachapoly.c
@@ -20,7 +20,7 @@
 #include "openbsd-compat/openssl-compat.h"
 #endif
 
-#if !defined(HAVE_EVP_CHACHA20) || defined(HAVE_BROKEN_CHACHA20)
+#if !defined(HAVE_SUNW_EVP_CHACHA20) || defined(HAVE_BROKEN_CHACHA20)
 
 #include <sys/types.h>
 #include <stdarg.h> /* needed for log.h */
@@ -135,4 +135,4 @@ chachapoly_get_length(struct chachapoly_ctx *ctx,
 	return 0;
 }
 
-#endif /* !defined(HAVE_EVP_CHACHA20) || defined(HAVE_BROKEN_CHACHA20) */
+#endif /* !defined(HAVE_SUNW_EVP_CHACHA20) || defined(HAVE_BROKEN_CHACHA20) */
diff --git a/configure.ac b/configure.ac
index 25d57e7c2..05a7fde59 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2940,9 +2940,9 @@ AC_ARG_WITH([ssl-engine],
 
 nocrypto_saved_LIBS="$LIBS"
 if test "x$openssl" = "xyes" ; then
-	LIBS="-lcrypto $LIBS"
-	CHANNELLIBS="-lcrypto $CHANNELLIBS"
-	AC_TRY_LINK_FUNC([RAND_add], ,
+	LIBS="-L /usr/lib:${DESTDIR}/usr/lib -lsunw_crypto $LIBS"
+	CHANNELLIBS="-L /usr/lib:${DESTDIR}/usr/lib -lsunw_crypto $CHANNELLIBS"
+	AC_TRY_LINK_FUNC([sunw_RAND_add], ,
 	    [AC_MSG_ERROR([*** working libcrypto not found, check config.log])])
 	AC_CHECK_HEADER([openssl/opensslv.h], ,
 	    [AC_MSG_ERROR([*** OpenSSL headers missing - please install first or check config.log ***])])
@@ -3130,25 +3130,25 @@ if test "x$openssl" = "xyes" ; then
 	)
 
 	AC_CHECK_FUNCS([ \
-		BN_is_prime_ex \
-		DES_crypt \
-		DSA_generate_parameters_ex \
-		EVP_DigestSign \
-		EVP_DigestVerify \
-		EVP_DigestFinal_ex \
-		EVP_DigestInit_ex \
-		EVP_MD_CTX_cleanup \
-		EVP_MD_CTX_copy_ex \
-		EVP_MD_CTX_init \
-		HMAC_CTX_init \
-		RSA_generate_key_ex \
-		RSA_get_default_method \
+		sunw_BN_is_prime_ex \
+		sunw_DES_crypt \
+		sunw_DSA_generate_parameters_ex \
+		sunw_EVP_DigestSign \
+		sunw_EVP_DigestVerify \
+		sunw_EVP_DigestFinal_ex \
+		sunw_EVP_DigestInit_ex \
+		sunw_EVP_MD_CTX_cleanup \
+		sunw_EVP_MD_CTX_copy_ex \
+		sunw_EVP_MD_CTX_init \
+		sunw_HMAC_CTX_init \
+		sunw_RSA_generate_key_ex \
+		sunw_RSA_get_default_method \
 	])
 
 	# OpenSSL_add_all_algorithms may be a macro.
-	AC_CHECK_FUNC(OpenSSL_add_all_algorithms,
+	AC_CHECK_FUNC(sunw_OpenSSL_add_all_algorithms,
 	    AC_DEFINE(HAVE_OPENSSL_ADD_ALL_ALGORITHMS, 1, [as a function]),
-	    AC_CHECK_DECL(OpenSSL_add_all_algorithms,
+	    AC_CHECK_DECL(sunw_OpenSSL_add_all_algorithms,
 		AC_DEFINE(HAVE_OPENSSL_ADD_ALL_ALGORITHMS, 1, [as a macro]), ,
 		[[#include <openssl/evp.h>]]
 	    )
@@ -3156,11 +3156,11 @@ if test "x$openssl" = "xyes" ; then
 
 	# LibreSSL/OpenSSL API differences
 	AC_CHECK_FUNCS([ \
-		EVP_CIPHER_CTX_iv \
-		EVP_CIPHER_CTX_iv_noconst \
-		EVP_CIPHER_CTX_get_iv \
-		EVP_CIPHER_CTX_get_updated_iv \
-		EVP_CIPHER_CTX_set_iv \
+		sunw_EVP_CIPHER_CTX_iv \
+		sunw_EVP_CIPHER_CTX_iv_noconst \
+		sunw_EVP_CIPHER_CTX_get_iv \
+		sunw_EVP_CIPHER_CTX_get_updated_iv \
+		sunw_EVP_CIPHER_CTX_set_iv \
 	])
 
 	if test "x$openssl_engine" = "xyes" ; then
@@ -3219,7 +3219,7 @@ if test "x$openssl" = "xyes" ; then
 	)
 
 	# Check for various EVP support in OpenSSL
-	AC_CHECK_FUNCS([EVP_sha256 EVP_sha384 EVP_sha512 EVP_chacha20])
+	AC_CHECK_FUNCS([sunw_EVP_sha256 sunw_EVP_sha384 sunw_EVP_sha512 sunw_EVP_chacha20])
 
 	# Check complete ECC support in OpenSSL
 	AC_MSG_CHECKING([whether OpenSSL has NID_X9_62_prime256v1])
@@ -3299,7 +3299,7 @@ if test "x$openssl" = "xyes" ; then
 	if test x$enable_nistp256 = x1 || test x$enable_nistp384 = x1 || \
 	    test x$enable_nistp521 = x1; then
 		AC_DEFINE(OPENSSL_HAS_ECC, [1], [OpenSSL has ECC])
-		AC_CHECK_FUNCS([EC_KEY_METHOD_new])
+		AC_CHECK_FUNCS([sunw_EC_KEY_METHOD_new])
 		openssl_ecc=yes
 	else
 		openssl_ecc=no
diff --git a/digest-openssl.c b/digest-openssl.c
index e073a807b..c0bf66d68 100644
--- a/digest-openssl.c
+++ b/digest-openssl.c
@@ -32,13 +32,13 @@
 #include "digest.h"
 #include "ssherr.h"
 
-#ifndef HAVE_EVP_SHA256
+#ifndef HAVE_SUNW_EVP_SHA256
 # define EVP_sha256 NULL
 #endif
-#ifndef HAVE_EVP_SHA384
+#ifndef HAVE_SUNW_EVP_SHA384
 # define EVP_sha384 NULL
 #endif
-#ifndef HAVE_EVP_SHA512
+#ifndef HAVE_SUNW_EVP_SHA512
 # define EVP_sha512 NULL
 #endif
 
diff --git a/openbsd-compat/libressl-api-compat.c b/openbsd-compat/libressl-api-compat.c
index 59be17397..543e11f85 100644
--- a/openbsd-compat/libressl-api-compat.c
+++ b/openbsd-compat/libressl-api-compat.c
@@ -25,7 +25,7 @@
 
 #include <openssl/evp.h>
 
-#ifndef HAVE_EVP_CIPHER_CTX_GET_IV
+#ifndef HAVE_SUNW_EVP_CIPHER_CTX_GET_IV
 int
 EVP_CIPHER_CTX_get_iv(const EVP_CIPHER_CTX *ctx, unsigned char *iv, size_t len)
 {
@@ -44,17 +44,17 @@ EVP_CIPHER_CTX_get_iv(const EVP_CIPHER_CTX *ctx, unsigned char *iv, size_t len)
 	if (len != 0) {
 		if (iv == NULL)
 			return 0;
-# ifdef HAVE_EVP_CIPHER_CTX_IV
+# ifdef HAVE_SUNW_EVP_CIPHER_CTX_IV
 		memcpy(iv, EVP_CIPHER_CTX_iv(ctx), len);
 # else
 		memcpy(iv, ctx->iv, len);
-# endif /* HAVE_EVP_CIPHER_CTX_IV */
+# endif /* HAVE_SUNW_EVP_CIPHER_CTX_IV */
 	}
 	return 1;
 }
-#endif /* HAVE_EVP_CIPHER_CTX_GET_IV */
+#endif /* HAVE_SUNW_EVP_CIPHER_CTX_GET_IV */
 
-#ifndef HAVE_EVP_CIPHER_CTX_SET_IV
+#ifndef HAVE_SUNW_EVP_CIPHER_CTX_SET_IV
 int
 EVP_CIPHER_CTX_set_iv(EVP_CIPHER_CTX *ctx, const unsigned char *iv, size_t len)
 {
@@ -73,14 +73,14 @@ EVP_CIPHER_CTX_set_iv(EVP_CIPHER_CTX *ctx, const unsigned char *iv, size_t len)
 	if (len != 0) {
 		if (iv == NULL)
 			return 0;
-# ifdef HAVE_EVP_CIPHER_CTX_IV_NOCONST
+# ifdef HAVE_SUNW_EVP_CIPHER_CTX_IV_NOCONST
 		memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), iv, len);
 # else
 		memcpy(ctx->iv, iv, len);
-# endif /* HAVE_EVP_CIPHER_CTX_IV_NOCONST */
+# endif /* HAVE_SUNW_EVP_CIPHER_CTX_IV_NOCONST */
 	}
 	return 1;
 }
-#endif /* HAVE_EVP_CIPHER_CTX_SET_IV */
+#endif /* HAVE_SUNW_EVP_CIPHER_CTX_SET_IV */
 
 #endif /* WITH_OPENSSL */
diff --git a/openbsd-compat/openssl-compat.h b/openbsd-compat/openssl-compat.h
index 6b8fff412..607c3db6c 100644
--- a/openbsd-compat/openssl-compat.h
+++ b/openbsd-compat/openssl-compat.h
@@ -64,14 +64,14 @@ void ssh_libcrypto_init(void);
 # define BN_set_flags(a, b)
 #endif
 
-#ifndef HAVE_EVP_CIPHER_CTX_GET_IV
-# ifdef HAVE_EVP_CIPHER_CTX_GET_UPDATED_IV
+#ifndef HAVE_SUNW_EVP_CIPHER_CTX_GET_IV
+# ifdef HAVE_SUNW_EVP_CIPHER_CTX_GET_UPDATED_IV
 #  define EVP_CIPHER_CTX_get_iv EVP_CIPHER_CTX_get_updated_iv
-# else /* HAVE_EVP_CIPHER_CTX_GET_UPDATED_IV */
+# else /* HAVE_SUNW_EVP_CIPHER_CTX_GET_UPDATED_IV */
 int EVP_CIPHER_CTX_get_iv(const EVP_CIPHER_CTX *ctx,
     unsigned char *iv, size_t len);
-# endif /* HAVE_EVP_CIPHER_CTX_GET_UPDATED_IV */
-#endif /* HAVE_EVP_CIPHER_CTX_GET_IV */
+# endif /* HAVE_SUNW_EVP_CIPHER_CTX_GET_UPDATED_IV */
+#endif /* HAVE_SUNW_EVP_CIPHER_CTX_GET_IV */
 
 #ifndef HAVE_EVP_CIPHER_CTX_SET_IV
 int EVP_CIPHER_CTX_set_iv(EVP_CIPHER_CTX *ctx,
diff --git a/ssh-pkcs11-client.c b/ssh-pkcs11-client.c
index b8d1700f0..1f051374c 100644
--- a/ssh-pkcs11-client.c
+++ b/ssh-pkcs11-client.c
@@ -48,7 +48,7 @@
 
 #include "openbsd-compat/openssl-compat.h"
 
-#if !defined(OPENSSL_HAS_ECC) || !defined(HAVE_EC_KEY_METHOD_NEW)
+#if !defined(OPENSSL_HAS_ECC) || !defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 #define EC_KEY_METHOD void
 #define EC_KEY void
 #endif
@@ -103,7 +103,7 @@ helper_by_rsa(const RSA *rsa)
 
 }
 
-#if defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW)
+#if defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 static struct helper *
 helper_by_ec(const EC_KEY *ec)
 {
@@ -119,7 +119,7 @@ helper_by_ec(const EC_KEY *ec)
 	return NULL;
 
 }
-#endif /* defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW) */
+#endif /* defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW) */
 
 static void
 helper_free(struct helper *helper)
@@ -148,7 +148,7 @@ helper_free(struct helper *helper)
 		nhelpers--;
 	}
 	free(helper->path);
-#if defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW)
+#if defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 	EC_KEY_METHOD_free(helper->ec_meth);
 #endif
 	RSA_meth_free(helper->rsa_meth);
@@ -325,7 +325,7 @@ rsa_finish(RSA *rsa)
 	return 1;
 }
 
-#if defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW)
+#if defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 static ECDSA_SIG *
 ecdsa_do_sign(const unsigned char *dgst, int dgst_len, const BIGNUM *inv,
     const BIGNUM *rp, EC_KEY *ec)
@@ -406,7 +406,7 @@ ecdsa_do_finish(EC_KEY *ec)
 	if (helper->nrsa == 0 && helper->nec == 0)
 		helper_terminate(helper);
 }
-#endif /* defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW) */
+#endif /* defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW) */
 
 /* redirect private key crypto operations to the ssh-pkcs11-helper */
 static void
@@ -426,7 +426,7 @@ wrap_key(struct helper *helper, struct sshkey *k)
 		if (EVP_PKEY_set1_RSA(k->pkey, rsa) != 1)
 			fatal_f("EVP_PKEY_set1_RSA failed");
 		RSA_free(rsa);
-#if defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW)
+#if defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 	} else if (k->type == KEY_ECDSA) {
 		if ((ecdsa = EVP_PKEY_get1_EC_KEY(k->pkey)) == NULL)
 			fatal_f("no ECDSA key");
@@ -457,7 +457,7 @@ pkcs11_make_cert(const struct sshkey *priv,
 	struct sshkey *ret;
 	int r;
 	RSA *rsa_priv = NULL, *rsa_cert = NULL;
-#if defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW)
+#if defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 	EC_KEY *ec_priv = NULL, *ec_cert = NULL;
 #endif
 
@@ -489,7 +489,7 @@ pkcs11_make_cert(const struct sshkey *priv,
 			fatal_f("EVP_PKEY_set1_RSA failed");
 		RSA_free(rsa_priv);
 		RSA_free(rsa_cert);
-#if defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW)
+#if defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 	} else if (priv->type == KEY_ECDSA) {
 		if ((ec_priv = EVP_PKEY_get1_EC_KEY(priv->pkey)) == NULL)
 			fatal_f("no EC pkey");
@@ -528,7 +528,7 @@ pkcs11_start_helper_methods(struct helper *helper)
 {
 	RSA_METHOD *rsa_meth = NULL;
 	EC_KEY_METHOD *ec_meth = NULL;
-#if defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW)
+#if defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 	int (*ec_init)(EC_KEY *key);
 	int (*ec_copy)(EC_KEY *dest, const EC_KEY *src);
 	int (*ec_set_group)(EC_KEY *key, const EC_GROUP *grp);
@@ -545,7 +545,7 @@ pkcs11_start_helper_methods(struct helper *helper)
 	    &ec_copy, &ec_set_group, &ec_set_private, &ec_set_public);
 	EC_KEY_METHOD_set_init(ec_meth, ec_init, ecdsa_do_finish,
 	    ec_copy, ec_set_group, ec_set_private, ec_set_public);
-#endif /* defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW) */
+#endif /* defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW) */
 
 	if ((rsa_meth = RSA_meth_dup(RSA_get_default_method())) == NULL)
 		fatal_f("RSA_meth_dup failed");
@@ -586,7 +586,7 @@ pkcs11_start_helper(const char *path)
 		close(pair[0]);
 		close(pair[1]);
 		RSA_meth_free(helper->rsa_meth);
-#if defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW)
+#if defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 		EC_KEY_METHOD_free(helper->ec_meth);
 #endif
 		free(helper);
diff --git a/ssh-pkcs11.c b/ssh-pkcs11.c
index 31b9360f0..9f3b798d4 100644
--- a/ssh-pkcs11.c
+++ b/ssh-pkcs11.c
@@ -79,7 +79,7 @@ struct pkcs11_key {
 
 int pkcs11_interactive = 0;
 
-#if defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW)
+#if defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 static void
 ossl_error(const char *msg)
 {
@@ -89,7 +89,7 @@ ossl_error(const char *msg)
 	while ((e = ERR_get_error()) != 0)
 		error_f("libcrypto error: %s", ERR_error_string(e, NULL));
 }
-#endif /* OPENSSL_HAS_ECC && HAVE_EC_KEY_METHOD_NEW */
+#endif /* OPENSSL_HAS_ECC && HAVE_SUNW_EC_KEY_METHOD_NEW */
 
 int
 pkcs11_init(int interactive)
@@ -190,10 +190,10 @@ pkcs11_del_provider(char *provider_id)
 
 static RSA_METHOD *rsa_method;
 static int rsa_idx = 0;
-#if defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW)
+#if defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 static EC_KEY_METHOD *ec_key_method;
 static int ec_key_idx = 0;
-#endif /* OPENSSL_HAS_ECC && HAVE_EC_KEY_METHOD_NEW */
+#endif /* OPENSSL_HAS_ECC && HAVE_SUNW_EC_KEY_METHOD_NEW */
 
 /* release a wrapped object */
 static void
@@ -509,7 +509,7 @@ pkcs11_rsa_wrap(struct pkcs11_provider *provider, CK_ULONG slotidx,
 	return (0);
 }
 
-#if defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW)
+#if defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 /* openssl callback doing the actual signing operation */
 static ECDSA_SIG *
 ecdsa_do_sign(const unsigned char *dgst, int dgst_len, const BIGNUM *inv,
@@ -624,7 +624,7 @@ pkcs11_ecdsa_wrap(struct pkcs11_provider *provider, CK_ULONG slotidx,
 
 	return (0);
 }
-#endif /* OPENSSL_HAS_ECC && HAVE_EC_KEY_METHOD_NEW */
+#endif /* OPENSSL_HAS_ECC && HAVE_SUNW_EC_KEY_METHOD_NEW */
 
 /* remove trailing spaces */
 static char *
@@ -702,7 +702,7 @@ pkcs11_key_included(struct sshkey ***keysp, int *nkeys, struct sshkey *key)
 	return (0);
 }
 
-#if defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW)
+#if defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 static struct sshkey *
 pkcs11_fetch_ecdsa_pubkey(struct pkcs11_provider *p, CK_ULONG slotidx,
     CK_OBJECT_HANDLE *obj)
@@ -828,7 +828,7 @@ fail:
 
 	return (key);
 }
-#endif /* OPENSSL_HAS_ECC && HAVE_EC_KEY_METHOD_NEW */
+#endif /* OPENSSL_HAS_ECC && HAVE_SUNW_EC_KEY_METHOD_NEW */
 
 static struct sshkey *
 pkcs11_fetch_rsa_pubkey(struct pkcs11_provider *p, CK_ULONG slotidx,
@@ -939,7 +939,7 @@ pkcs11_fetch_x509_pubkey(struct pkcs11_provider *p, CK_ULONG slotidx,
 #endif
 	struct sshkey		*key = NULL;
 	int			 i;
-#if defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW)
+#if defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 	int			 nid;
 #endif
 	const u_char		*cp;
@@ -1031,7 +1031,7 @@ pkcs11_fetch_x509_pubkey(struct pkcs11_provider *p, CK_ULONG slotidx,
 			fatal("EVP_PKEY_set1_RSA failed");
 		key->type = KEY_RSA;
 		key->flags |= SSHKEY_FLAG_EXT;
-#if defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW)
+#if defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 	} else if (EVP_PKEY_base_id(evp) == EVP_PKEY_EC) {
 		if (EVP_PKEY_get0_EC_KEY(evp) == NULL) {
 			error("invalid x509; no ec key");
@@ -1289,11 +1289,11 @@ pkcs11_fetch_keys(struct pkcs11_provider *p, CK_ULONG slotidx,
 		case CKK_RSA:
 			key = pkcs11_fetch_rsa_pubkey(p, slotidx, &obj);
 			break;
-#if defined(OPENSSL_HAS_ECC) && defined(HAVE_EC_KEY_METHOD_NEW)
+#if defined(OPENSSL_HAS_ECC) && defined(HAVE_SUNW_EC_KEY_METHOD_NEW)
 		case CKK_ECDSA:
 			key = pkcs11_fetch_ecdsa_pubkey(p, slotidx, &obj);
 			break;
-#endif /* OPENSSL_HAS_ECC && HAVE_EC_KEY_METHOD_NEW */
+#endif /* OPENSSL_HAS_ECC && HAVE_SUNW_EC_KEY_METHOD_NEW */
 		default:
 			/* XXX print key type? */
 			key = NULL;
-- 
2.48.1

