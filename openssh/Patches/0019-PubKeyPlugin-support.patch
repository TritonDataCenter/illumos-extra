From 6fcb9ac2a0a3c377b37b4207bded60eeabd2ef57 Mon Sep 17 00:00:00 2001
From: Travis Paul <travis.paul@mnx.io>
Date: Thu, 30 Nov 2023 19:18:37 +0000
Subject: [PATCH] PubKeyPlugin support

This adds the PubKeyPlugin directive and associated code from
SunSSH, allowing an in-process shared library to be called
into to check public keys for authentication.
---
 auth2-pubkey.c | 86 ++++++++++++++++++++++++++++++++++++++++++++++++++
 servconf.c     | 16 +++++++++-
 servconf.h     |  1 +
 3 files changed, 102 insertions(+), 1 deletion(-)

diff --git a/auth2-pubkey.c b/auth2-pubkey.c
index 7580db78d..13c404a5d 100644
--- a/auth2-pubkey.c
+++ b/auth2-pubkey.c
@@ -23,6 +23,12 @@
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
+/*
+ * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
+ * Copyright 2015 Joyent, Inc.
+ * Copyright 2023 MNX Cloud, Inc.
+ * Use is subject to license terms.
+ */
 
 #include "includes.h"
 
@@ -41,6 +47,7 @@
 #include <time.h>
 #include <unistd.h>
 #include <limits.h>
+#include <dlfcn.h>
 
 #include "xmalloc.h"
 #include "ssh.h"
@@ -74,6 +81,10 @@
 extern ServerOptions options;
 extern struct authmethod_cfg methodcfg_pubkey;
 
+static const char *UNIV_SYM_NAME = "sshd_user_key_allowed";
+typedef int (*UNIV_SYM)(struct passwd *, const char *,
+    const u_char *, size_t);
+
 static char *
 format_key(const struct sshkey *key)
 {
@@ -746,6 +757,76 @@ user_key_command_allowed2(struct passwd *user_pw, struct sshkey *key,
 	return found_key;
 }
 
+/**
+ * Checks whether or not access is allowed based on a plugin specified
+ * in sshd_config (PubKeyPlugin).
+ *
+ * Note that this expects a symbol in the loaded library that takes
+ * the current user (pwd entry), the current key and it's fingerprint.
+ * The symbol is expected to return 1 on success and 0 on failure.
+ *
+ * While we could optimize this code to dlopen once in the process' lifetime,
+ * sshd is already a slow beast, so this is really not a concern.
+ * The overhead is basically a rounding error compared to everything else, and
+ * it keeps this code minimally invasive.
+ */
+static int
+user_key_allowed_from_plugin(struct passwd *pw, struct sshkey *key,
+    struct sshauthopt **authoptsp)
+{
+	UNIV_SYM univ_sym = NULL;
+	void *handle = NULL;
+	int success = 0;
+
+	if (options.pubkey_plugin == NULL || pw == NULL || key == NULL ||
+	    (key->type != KEY_RSA && key->type != KEY_DSA &&
+	    key->type != KEY_ECDSA && key->type != KEY_ED25519))
+		return success;
+
+	handle = dlopen(options.pubkey_plugin, RTLD_NOW);
+	if (handle == NULL) {
+		debug("Unable to open library %s: %s", options.pubkey_plugin,
+		dlerror());
+		goto out;
+	}
+
+	/*
+	 * Check that the universal symbol for checking keys is present in
+	 * the libsmartsshd plugin.
+	 */
+	univ_sym = (UNIV_SYM)dlsym(handle, UNIV_SYM_NAME);
+	if (univ_sym != NULL) {
+		u_char *blob;
+		const char *type = sshkey_type(key);
+		size_t len = 0;
+		if (sshkey_to_blob(key, &blob, &len) != 0) {
+			debug("failed to convert key to rfc4253 format");
+			goto out;
+		}
+		debug("Invoking %s from %s", UNIV_SYM_NAME,
+		    options.pubkey_plugin);
+		success = (*univ_sym)(pw, type, blob, len);
+		debug("pubkeyplugin returned: %d", success);
+		goto out;
+	} else {
+		debug("pubkeyplugin missing %s symbol", UNIV_SYM_NAME);
+	}
+
+out:
+	if (handle != NULL) {
+		dlclose(handle);
+		univ_sym = NULL;
+		handle = NULL;
+	}
+
+	if (success) {
+		verbose("Found matching %s key", sshkey_type(key));
+		*authoptsp = sshauthopt_new_with_keys_defaults();
+	}
+
+	return success;
+}
+
 /*
  * Check whether key authenticates and authorises the user.
  */
@@ -797,6 +878,11 @@ user_key_allowed(struct ssh *ssh, struct passwd *pw, struct sshkey *key,
 	sshauthopt_free(opts);
 	opts = NULL;
 
+	if ((success = user_key_allowed_from_plugin(pw, key, &opts)) != 0)
+		goto out;
+	sshauthopt_free(opts);
+	opts = NULL;
+
 	if ((success = user_key_command_allowed2(pw, key, remote_ip,
 	    remote_host, conn_id, rdomain, &opts)) != 0)
 		goto out;
diff --git a/servconf.c b/servconf.c
index ea76eaefc..d4e87a904 100644
--- a/servconf.c
+++ b/servconf.c
@@ -225,6 +225,7 @@ initialize_server_options(ServerOptions *options)
 	 */
 	options->pam_service_per_authmethod = 1;
 #endif
+	options->pubkey_plugin = NULL;
 }
 
 /* Returns 1 if a string option is unset or set to "none" or 0 otherwise. */
@@ -607,7 +608,7 @@ typedef enum {
 	sExposeAuthInfo, sRDomain, sPubkeyAuthOptions, sSecurityKeyProvider,
 	sRequiredRSASize, sChannelTimeout, sUnusedConnectionTimeout,
 	sSshdSessionPath,
-	sDeprecated, sIgnore, sUnsupported
+	sPubKeyPlugin, sDeprecated, sIgnore, sUnsupported
 } ServerOpCodes;
 
 #define SSHCFG_GLOBAL		0x01	/* allowed in main section of config */
@@ -811,6 +812,7 @@ static struct {
 	{ "channeltimeout", sChannelTimeout, SSHCFG_ALL },
 	{ "unusedconnectiontimeout", sUnusedConnectionTimeout, SSHCFG_ALL },
 	{ "sshdsessionpath", sSshdSessionPath, SSHCFG_GLOBAL },
+	{ "pubkeyplugin", sPubKeyPlugin, SSHCFG_ALL },
 	{ NULL, sBadOption, 0 }
 };
 
@@ -2760,6 +2762,18 @@ process_server_config_line_depth(ServerOptions *options, char *line,
 			options->pam_service_prefix = xstrdup(arg);
 		break;
 
+	case sPubKeyPlugin:
+		/*
+		 * Can't use parse_filename, as we need to support plain
+		 * names which dlopen will find on our lib path.
+		 */
+		arg = argv_next(&ac, &av);
+		if (!arg || *arg == '\0')
+			fatal("%s line %d: missing file name.",
+			    filename, linenum);
+		options->pubkey_plugin = xstrdup(arg);
+		break;
+
 	case sDeprecated:
 	case sIgnore:
 	case sUnsupported:
diff --git a/servconf.h b/servconf.h
index 9fc15cb9c..090a83356 100644
--- a/servconf.h
+++ b/servconf.h
@@ -250,6 +250,7 @@ typedef struct {
 	u_int64_t timing_secret;
 	char   *sk_provider;
 	int	required_rsa_size;	/* minimum size of RSA keys */
+	char   *pubkey_plugin;
 
 	char	**channel_timeouts;	/* inactivity timeout by channel type */
 	u_int	num_channel_timeouts;
-- 
2.34.1

