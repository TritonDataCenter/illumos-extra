From aa060b2065d782dd287c6220f14e8a97e29d1014 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Tue, 16 Jul 2019 13:43:14 -0700
Subject: [PATCH 30/32] Temporarily set ssh-keygen to use old PKCS#1 PEM format

SDC and its users have a lot of scripts and tools which expect
ssh-keygen to produce the old private key format.

We want to balance this against the fact that the new format
vastly improves security for passphrase protected keys, so if
we are generating a key with a passphrase, we will default
to the new format, otherwise old.
---
 ssh-keygen.1 | 23 +++++++++++++++--------
 ssh-keygen.c | 20 ++++++++++++++++++--
 2 files changed, 33 insertions(+), 10 deletions(-)

diff --git a/ssh-keygen.1 b/ssh-keygen.1
index df6803fd9..944f9c56e 100644
--- a/ssh-keygen.1
+++ b/ssh-keygen.1
@@ -279,12 +279,12 @@ If
 has also been specified, its argument is used as a prefix to the
 default path for the resulting host key files.
 This is used by
-.Pa /etc/rc
+.Pa /lib/svc/method/sshd
 to generate new host keys.
 .It Fl a Ar rounds
-When saving a private key, this option specifies the number of KDF
-(key derivation function, currently
-.Xr bcrypt_pbkdf 3 )
+When saving a new-format private key (i.e. an ed25519 key or when the
+.Fl o
+flag is set), this option specifies the number of KDF (key derivation function)
 rounds used.
 Higher numbers result in slower passphrase verification and increased
 resistance to brute-force password cracking (should the keys be stolen).
@@ -308,6 +308,8 @@ flag will be ignored.
 Provides a new comment.
 .It Fl c
 Requests changing the comment in the private and public key files.
+This operation is only supported for keys stored in the
+newer OpenSSH format.
 The program will prompt for the file containing the private keys, for
 the passphrase if the key has one, and for the new comment.
 .It Fl D Ar pkcs11
@@ -459,10 +461,6 @@ or
 By default OpenSSH will write newly-generated private keys in its own
 format, but when converting public keys for export the default format is
 .Dq RFC4716 .
-Setting a format of
-.Dq PEM
-when generating or updating a supported private key type will cause the
-key to be stored in the legacy PEM private key format.
 .It Fl N Ar new_passphrase
 Provides the new passphrase.
 .It Fl n Ar principals
@@ -533,6 +531,15 @@ The default is to print both.
 The
 .Fl O
 option may be specified multiple times.
+.El
+.It Fl o
+Causes
+.Nm
+to save private keys using the new OpenSSH format rather than
+the more compatible PEM format.
+The new format has increased resistance to brute-force password cracking
+but is not supported by versions of OpenSSH prior to 6.5.
+Ed25519 keys always use the new private key format.
 .It Fl P Ar passphrase
 Provides the (old) passphrase.
 .It Fl p
diff --git a/ssh-keygen.c b/ssh-keygen.c
index b5b589ad7..f25ff9bc0 100644
--- a/ssh-keygen.c
+++ b/ssh-keygen.c
@@ -157,7 +157,8 @@ static char *pkcs11provider = NULL;
 static char *sk_provider = NULL;
 
 /* Format for writing private keys */
-static int private_key_format = SSHKEY_PRIVATE_OPENSSH;
+static int private_key_format = SSHKEY_PRIVATE_PEM;
+int use_new_format = -1;
 
 /* Cipher for new-format private keys */
 static char *openssh_format_cipher = NULL;
@@ -1484,6 +1485,10 @@ do_change_passphrase(struct passwd *pw)
 		freezero(passphrase2, strlen(passphrase2));
 	}
 
+	if (strlen(passphrase1) > 0 && use_new_format == -1) {
+		private_key_format = SSHKEY_PRIVATE_OPENSSH;
+	}
+
 	/* Save the file using the new passphrase. */
 	if ((r = sshkey_save_private(private, identity_file, passphrase1,
 	    comment, private_key_format, openssh_format_cipher, rounds)) != 0) {
@@ -1577,6 +1582,10 @@ do_change_comment(struct passwd *pw, const char *identity_comment)
 		}
 	}
 
+	if (strlen(passphrase) > 0 && use_new_format == -1) {
+		private_key_format = SSHKEY_PRIVATE_OPENSSH;
+	}
+
 	if (private->type != KEY_ED25519 && private->type != KEY_XMSS &&
 	    private_key_format != SSHKEY_PRIVATE_OPENSSH) {
 		error("Comments are only supported for keys stored in "
@@ -3454,11 +3463,13 @@ main(int argc, char **argv)
 			if (strcasecmp(optarg, "PKCS8") == 0) {
 				convert_format = FMT_PKCS8;
 				private_key_format = SSHKEY_PRIVATE_PKCS8;
+				use_new_format = 0;
 				break;
 			}
 			if (strcasecmp(optarg, "PEM") == 0) {
 				convert_format = FMT_PEM;
 				private_key_format = SSHKEY_PRIVATE_PEM;
+				use_new_format = 0;
 				break;
 			}
 			fatal("Unsupported conversion format \"%s\"", optarg);
@@ -3466,7 +3477,8 @@ main(int argc, char **argv)
 			cert_principals = optarg;
 			break;
 		case 'o':
-			/* no-op; new format is already the default */
+			private_key_format = SSHKEY_PRIVATE_OPENSSH;
+			use_new_format = 1;
 			break;
 		case 'p':
 			change_passphrase = 1;
@@ -3935,6 +3947,10 @@ main(int argc, char **argv)
 		snprintf(comment, sizeof comment, "%s@%s", pw->pw_name, hostname);
 	}
 
+	if (strlen(passphrase) > 0 && use_new_format == -1) {
+		private_key_format = SSHKEY_PRIVATE_OPENSSH;
+	}
+
 	/* Save the key with the given passphrase and comment. */
 	if ((r = sshkey_save_private(private, identity_file, passphrase,
 	    comment, private_key_format, openssh_format_cipher, rounds)) != 0) {
-- 
2.34.1

