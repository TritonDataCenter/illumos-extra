From 2a080be73f6b1f38b112d1009b79994c69de83c4 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Fri, 4 Sep 2015 10:38:28 -0700
Subject: [PATCH 28/35] Compatibility for SunSSH_1.5* should include old DH KEx
 algos

We use the kex compat mechanism here to recognise old SunSSH
versions and present a kex proposal that always includes the
dh-group14 and -group1 algorithms.

Without this, an old SunSSH client cannot connect to our
new daemon.
---
 compat.c | 86 ++++++++++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 81 insertions(+), 5 deletions(-)

diff --git a/compat.c b/compat.c
index 0624dc6d..5cfbf28a 100644
--- a/compat.c
+++ b/compat.c
@@ -55,7 +55,8 @@ compat_datafellows(const char *version)
 					SSH_BUG_SIGTYPE},
 		{ "OpenSSH_3.*",	SSH_OLD_FORWARD_ADDR|SSH_BUG_SIGTYPE },
 		{ "Sun_SSH_1.0*",	SSH_BUG_NOREKEY|SSH_BUG_EXTEOF|
-					SSH_BUG_SIGTYPE},
+					SSH_BUG_SIGTYPE|SSH_OLD_DHGEX},
+		{ "Sun_SSH_1.5*",	SSH_BUG_SIGTYPE|SSH_OLD_DHGEX},
 		{ "OpenSSH_2*,"
 		  "OpenSSH_3*,"
 		  "OpenSSH_4*",		SSH_BUG_SIGTYPE },
@@ -183,6 +184,81 @@ proto_spec(const char *spec)
 	return ret;
 }
 
+/*
+ * Filters a proposal string, excluding any algorithm matching the 'filter'
+ * pattern list.
+ */
+static char *
+filter_proposal(char *proposal, const char *filter)
+{
+	struct sshbuf *b;
+	int rc;
+	char *orig_prop, *fix_prop;
+	char *cp, *tmp;
+
+	if ((b = sshbuf_new()) == NULL)
+		fatal("%s: sshbuf_new failed", __func__);
+
+	tmp = orig_prop = xstrdup(proposal);
+	while ((cp = strsep(&tmp, ",")) != NULL) {
+		if (match_pattern_list(cp, filter, 0) != 1) {
+			if (sshbuf_len(b) > 0) {
+				if ((rc = sshbuf_put_u8(b, ','))) {
+					fatal("%s: sshbuf_put_u8 returned %d",
+					    __func__, rc);
+				}
+			}
+			if ((rc = sshbuf_put(b, cp, strlen(cp)))) {
+				fatal("%s: sshbuf_put returned %d",
+				    __func__, rc);
+			}
+		} else
+			debug2("Compat: skipping algorithm \"%s\"", cp);
+	}
+	if ((rc = sshbuf_put_u8(b, 0)))
+		fatal("%s: sshbuf_put_u8 returned %d", __func__, rc);
+	fix_prop = xstrdup((char *)sshbuf_ptr(b));
+	if (fix_prop == NULL)
+		fatal("%s: xstrdup failed", __func__);
+	sshbuf_free(b);
+	free(orig_prop);
+
+	return fix_prop;
+}
+
+/*
+ * Adds an algorithm to the end of a proposal list, only if the algorithm is
+ * not already present.
+ */
+static char *
+append_proposal(char *proposal, const char *append)
+{
+	struct sshbuf *b;
+	char *fix_prop;
+	int rc;
+
+	if (strstr(proposal, append) != NULL)
+		return proposal;
+
+	if ((b = sshbuf_new()) == NULL)
+		fatal("%s: sshbuf_new failed", __func__);
+	if ((rc = sshbuf_put(b, proposal, strlen(proposal))))
+		fatal("%s: sshbuf_put returned %d", __func__, rc);
+	if (sshbuf_len(b) > 0) {
+		if ((rc = sshbuf_put_u8(b, ',')))
+			fatal("%s: sshbuf_put_u8 returned %d", __func__, rc);
+	}
+	if ((rc = sshbuf_put(b, append, strlen(append))) ||
+	    (rc = sshbuf_put_u8(b, 0)))
+		fatal("%s: buffer error: %d", __func__, rc);
+	fix_prop = xstrdup((char *)sshbuf_ptr(b));
+	if (fix_prop == NULL)
+		fatal("%s: xstrdup failed", __func__);
+	sshbuf_free(b);
+
+	return fix_prop;
+}
+
 char *
 compat_cipher_proposal(char *cipher_prop)
 {
@@ -222,10 +298,10 @@ compat_kex_proposal(char *p)
 		    "curve25519-sha256@libssh.org")) == NULL)
 			fatal("match_filter_blacklist failed");
 	if ((datafellows & SSH_OLD_DHGEX) != 0) {
-		if ((p = match_filter_blacklist(p,
-		    "diffie-hellman-group-exchange-sha256,"
-		    "diffie-hellman-group-exchange-sha1")) == NULL)
-			fatal("match_filter_blacklist failed");
+		p = filter_proposal(p, "diffie-hellman-group-exchange-sha256");
+		p = filter_proposal(p, "diffie-hellman-group-exchange-sha1");
+		p = append_proposal(p, "diffie-hellman-group14-sha1");
+		p = append_proposal(p, "diffie-hellman-group1-sha1");
 	}
 	debug2("%s: compat KEX proposal: %s", __func__, p);
 	if (*p == '\0')
-- 
2.22.0

