From 7ba7f633bd15f4b84aa514bffbec7b69b9c96d2b Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Wed, 9 Sep 2015 10:36:05 -0700
Subject: [PATCH 27/33] Temporarily set ssh-keygen and ssh-add to old FP format

SDC and its users have a lot of scripts that expect ssh-add
and ssh-keygen to return fingerprints in the old format.
As a temporary measure, make us default to producing this
same output until we have migrated everything over.
---
 ssh-add.c    | 14 +++++++++++---
 ssh-keygen.c | 22 ++++++++++++++++++----
 2 files changed, 29 insertions(+), 7 deletions(-)

diff --git a/ssh-add.c b/ssh-add.c
index 0035cb84a..fbde41c3c 100644
--- a/ssh-add.c
+++ b/ssh-add.c
@@ -54,6 +54,7 @@
 #include <string.h>
 #include <unistd.h>
 #include <limits.h>
+#include <assert.h>
 
 #include "xmalloc.h"
 #include "ssh.h"
@@ -91,7 +92,8 @@ static char *default_files[] = {
 	NULL
 };
 
-static int fingerprint_hash = SSH_FP_HASH_DEFAULT;
+static int fingerprint_hash = SSH_DIGEST_MD5;
+static int fingerprint_compat = 1;
 
 /* Default lifetime (0 == forever) */
 static int lifetime = 0;
@@ -531,7 +533,7 @@ test_key(int agent_fd, const char *filename)
 static int
 list_identities(int agent_fd, int do_fp)
 {
-	char *fp;
+	char *fp, *fpp;
 	int r;
 	struct ssh_identitylist *idlist;
 	u_int32_t left;
@@ -549,8 +551,13 @@ list_identities(int agent_fd, int do_fp)
 		if (do_fp) {
 			fp = sshkey_fingerprint(idlist->keys[i],
 			    fingerprint_hash, SSH_FP_DEFAULT);
+			fpp = fp;
+			if (fingerprint_compat == 1) {
+				assert(strncmp(fp, "MD5:", 4) == 0);
+				fpp += 4;
+			}
 			printf("%u %s %s (%s)\n", sshkey_size(idlist->keys[i]),
-			    fp == NULL ? "(null)" : fp, idlist->comments[i],
+			    fp == NULL ? "(null)" : fpp, idlist->comments[i],
 			    sshkey_type(idlist->keys[i]));
 			free(fp);
 		} else {
@@ -856,6 +863,7 @@ main(int argc, char **argv)
 			break;
 		case 'E':
 			fingerprint_hash = ssh_digest_alg_by_name(optarg);
+			fingerprint_compat = 0;
 			if (fingerprint_hash == -1)
 				fatal("Invalid hash algorithm \"%s\"", optarg);
 			break;
diff --git a/ssh-keygen.c b/ssh-keygen.c
index 8396c4036..f7fc88d45 100644
--- a/ssh-keygen.c
+++ b/ssh-keygen.c
@@ -42,6 +42,7 @@
 #include <limits.h>
 #include <locale.h>
 #include <time.h>
+#include <assert.h>
 
 #include "xmalloc.h"
 #include "sshkey.h"
@@ -91,7 +92,8 @@ static int print_fingerprint = 0;
 static int print_bubblebabble = 0;
 
 /* Hash algorithm to use for fingerprints. */
-static int fingerprint_hash = SSH_FP_HASH_DEFAULT;
+static int fingerprint_hash = SSH_DIGEST_MD5;
+static int fingerprint_compat = 1;
 
 /* The identity file name, given on the command line or entered by the user. */
 static char identity_file[PATH_MAX];
@@ -883,6 +885,7 @@ do_download(struct passwd *pw)
 	enum sshkey_fp_rep rep;
 	int fptype;
 	char *fp, *ra, **comments = NULL;
+	char *fpp;
 
 	fptype = print_bubblebabble ? SSH_DIGEST_SHA1 : fingerprint_hash;
 	rep =    print_bubblebabble ? SSH_FP_BUBBLEBABBLE : SSH_FP_DEFAULT;
@@ -898,8 +901,13 @@ do_download(struct passwd *pw)
 			    SSH_FP_RANDOMART);
 			if (fp == NULL || ra == NULL)
 				fatal_f("sshkey_fingerprint fail");
+			fpp = fp;
+			if (fingerprint_compat == 1) {
+				assert(strncmp(fp, "MD5:", 4) == 0);
+				fpp += 4;
+			}
 			printf("%u %s %s (PKCS11 key)\n", sshkey_size(keys[i]),
-			    fp, sshkey_type(keys[i]));
+			    fpp, sshkey_type(keys[i]));
 			if (log_level_get() >= SYSLOG_LEVEL_VERBOSE)
 				printf("%s\n", ra);
 			free(ra);
@@ -939,7 +947,7 @@ try_read_key(char **cpp)
 static void
 fingerprint_one_key(const struct sshkey *public, const char *comment)
 {
-	char *fp = NULL, *ra = NULL;
+	char *fp = NULL, *ra = NULL, *fpp;
 	enum sshkey_fp_rep rep;
 	int fptype;
 
@@ -949,7 +957,12 @@ fingerprint_one_key(const struct sshkey *public, const char *comment)
 	ra = sshkey_fingerprint(public, fingerprint_hash, SSH_FP_RANDOMART);
 	if (fp == NULL || ra == NULL)
 		fatal_f("sshkey_fingerprint failed");
-	mprintf("%u %s %s (%s)\n", sshkey_size(public), fp,
+	fpp = fp;
+	if (!print_bubblebabble && fingerprint_compat == 1) {
+		assert(strncmp(fp, "MD5:", 4) == 0);
+		fpp += 4;
+	}
+	mprintf("%u %s %s (%s)\n", sshkey_size(public), fpp,
 	    comment ? comment : "no comment", sshkey_type(public));
 	if (log_level_get() >= SYSLOG_LEVEL_VERBOSE)
 		printf("%s\n", ra);
@@ -3438,6 +3451,7 @@ main(int argc, char **argv)
 			break;
 		case 'E':
 			fingerprint_hash = ssh_digest_alg_by_name(optarg);
+			fingerprint_compat = 0;
 			if (fingerprint_hash == -1)
 				fatal("Invalid hash algorithm \"%s\"", optarg);
 			break;
-- 
2.34.1

